services:
  router:
    build: ./router
    container_name: router
    networks:
      production:
        ipv4_address: 172.30.0.2
      development:
        ipv4_address: 172.40.0.2
      service:
        ipv4_address: 172.20.0.2
      vpn_network:
        ipv4_address: 172.10.0.2
    ports:
      - "80:80"
      - "8080:8080"
      - "1194:1194/udp"
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    restart: unless-stopped

  # Aplicación en entorno de producción
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: prod-app
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_USER=john
      - DB_PASSWORD=postgres
      - DB_NAME=tasksdb
      - DB_PORT=5432
    networks:
      - production
    cap_add:
      - NET_ADMIN
    dns:
      - 172.20.0.100
    sysctls:
      - net.ipv4.ip_forward=1
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./app/app-prod-wrapper.sh:/app-wrapper.sh
      - ./app/supervisord.conf:/etc/supervisord.conf
    # entrypoint: ["/bin/sh", "/app-wrapper.sh"]

  # Nginx (Producción)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.nginx
    container_name: prod-nginx
    restart: always
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx-wrapper.sh:/nginx-wrapper.sh
    networks:
      - production
    cap_add:
      - NET_ADMIN
    dns:
      - 172.20.0.100
    sysctls:
      - net.ipv4.ip_forward=1
    depends_on:
      - app-prod
      - router

  # PostgreSQL (Producción)
  postgres:
    image: postgres:14-alpine
    container_name: prod-postgres
    restart: always
    environment:
      - POSTGRES_USER=john
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tasksdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgres-wrapper.sh:/postgres-wrapper.sh
    networks:
      - production
    cap_add:
      - NET_ADMIN
    dns:
      - 172.20.0.100
    sysctls:
      - net.ipv4.ip_forward=1
    depends_on:
      - router
    entrypoint: ["/bin/sh", "postgres-wrapper.sh"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Aplicación en entorno de desarrollo
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: dev-app
    restart: always
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=mysql
      - DB_USER=john
      - DB_PASSWORD=mysql
      - DB_NAME=tasksdb
      - DB_PORT=3306
    networks:
      - development
    cap_add:
      - NET_ADMIN
    dns:
      - 172.20.0.100
    sysctls:
      - net.ipv4.ip_forward=1
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./app:/app
      - /app/node_modules
      - ./app/app-dev-wrapper.sh:/app-wrapper.sh
      - ./app/supervisord.conf:/etc/supervisord.conf
    # entrypoint: ["/bin/sh", "/app-wrapper.sh"]


  # MySQL (Desarrollo)
  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile.mysql
    container_name: dev-mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=tasksdb
      - MYSQL_USER=john
      - MYSQL_PASSWORD=mysql
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - development
    cap_add:
      - NET_ADMIN
    dns:
      - 172.20.0.100
    sysctls:
      - net.ipv4.ip_forward=1
    depends_on:
      - router
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 15
      start_period: 60s


  # Apache (Desarrollo)
  apache:
    image: httpd:alpine
    container_name: dev-apache
    restart: always
    volumes:
      - ./apache/httpd.conf:/usr/local/apache2/conf/httpd.conf
      - ./apache/dev.conf:/usr/local/apache2/conf/extra/httpd-vhosts.conf
      - ./apache/apache-wrapper.sh:/apache-wrapper.sh
    networks:
      - development
    cap_add:
      - NET_ADMIN
    dns:
      - 172.20.0.100
    sysctls:
      - net.ipv4.ip_forward=1
    depends_on:
      - app-dev
      - router
    entrypoint: ["/bin/sh", "/apache-wrapper.sh"]

  dns_server:
    build: ./dns_debian
    container_name: dns_server
    networks:
      service:
        ipv4_address: 172.20.0.100
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - nas_data:/backups
    restart: unless-stopped

  # Nuevo contenedor VPN
  openvpn:
    image: kylemanna/openvpn
    container_name: openvpn
    cap_add:
      - NET_ADMIN
    networks:
      vpn_network:
        ipv4_address: 172.10.0.3
    dns:
      - 172.20.0.100
    sysctls:
      - net.ipv4.ip_forward=1
    volumes:
      - openvpn_data:/etc/openvpn
      - ./openvpn/setup-vpn.sh:/setup-vpn.sh
    restart: unless-stopped
    depends_on:
      - router
    entrypoint: ["/bin/sh", "/setup-vpn.sh"]

networks:
  production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24
  development:
    driver: bridge
    ipam:
      config:
        - subnet: 172.40.0.0/24
  service:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  vpn_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.10.0.0/24

volumes:
  postgres_data:
  mysql_data:
  nas_data:
  openvpn_data: